/*
 * generated by Xtext 2.14.0
 */
package ctwedge.serializer;

import com.google.inject.Inject;
import ctwedge.services.CTWedgeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CTWedgeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CTWedgeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Element_CommaKeyword_1_q;
	protected AbstractElementAlias match_Parameter_SemicolonKeyword_1_q;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CTWedgeGrammarAccess) access;
		match_Element_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getCommaKeyword_1());
		match_Parameter_SemicolonKeyword_1_q = new TokenAlias(false, true, grammarAccess.getParameterAccess().getSemicolonKeyword_1());
		match_Primary_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
		match_Primary_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAND_OPERATORRule())
			return getAND_OPERATORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOT_OPERATORRule())
			return getNOT_OPERATORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOR_OPERATORRule())
			return getOR_OPERATORToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AND_OPERATOR:
	 * 	'&&' | 'and' | 'AND' | '&';
	 */
	protected String getAND_OPERATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&&";
	}
	
	/**
	 * NOT_OPERATOR:
	 * 	'!' | 'not';
	 */
	protected String getNOT_OPERATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * OR_OPERATOR:
	 * 	'||' | 'or' | 'OR' | '|';
	 */
	protected String getOR_OPERATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "||";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Element_CommaKeyword_1_q.equals(syntax))
				emit_Element_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameter_SemicolonKeyword_1_q.equals(syntax))
				emit_Parameter_SemicolonKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=elementID (ambiguity) (rule end)
	 */
	protected void emit_Element_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Element '}' (ambiguity) (rule end)
	 *     end=PossiblySignedNumber ']' (ambiguity) (rule end)
	 *     name=ID ':' 'Boolean' (ambiguity) (rule end)
	 *     step=INT (ambiguity) (rule end)
	 */
	protected void emit_Parameter_SemicolonKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '#' (ambiguity) boolConst=BoolConst
	 *     (rule start) '#' (ambiguity) name=elementID
	 *     (rule start) '#' (ambiguity) {AndExpression.left=}
	 *     (rule start) '#' (ambiguity) {EqualExpression.left=}
	 *     (rule start) '#' (ambiguity) {ImpliesExpression.left=}
	 *     (rule start) '#' (ambiguity) {ModMultDiv.left=}
	 *     (rule start) '#' (ambiguity) {NotExpression.predicate=}
	 *     (rule start) '#' (ambiguity) {OrExpression.left=}
	 *     (rule start) '#' (ambiguity) {PlusMinus.left=}
	 *     (rule start) '#' (ambiguity) {RelationalExpression.left=}
	 *     (rule start) (ambiguity) boolConst=BoolConst
	 *     (rule start) (ambiguity) name=elementID
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {EqualExpression.left=}
	 *     (rule start) (ambiguity) {ImpliesExpression.left=}
	 *     (rule start) (ambiguity) {ModMultDiv.left=}
	 *     (rule start) (ambiguity) {NotExpression.predicate=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {PlusMinus.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) boolConst=BoolConst
	 *     (rule start) NOT_OPERATOR (ambiguity) name=elementID
	 *     (rule start) NOT_OPERATOR (ambiguity) {NotExpression.predicate=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {EqualExpression.left=}
	 *     (rule start) (ambiguity) {ImpliesExpression.left=}
	 *     (rule start) (ambiguity) {ModMultDiv.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {PlusMinus.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {AndExpression.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {EqualExpression.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {ImpliesExpression.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {ModMultDiv.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {OrExpression.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {PlusMinus.left=}
	 *     (rule start) NOT_OPERATOR (ambiguity) {RelationalExpression.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
